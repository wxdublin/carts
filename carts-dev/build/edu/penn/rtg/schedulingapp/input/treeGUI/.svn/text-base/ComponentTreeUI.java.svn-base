package edu.penn.rtg.schedulingapp.input.treeGUI;

import java.awt.GridLayout;

import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.JFrame;
import javax.swing.tree.DefaultTreeModel;

import com.jpe.jpe;
import edu.penn.rtg.schedulingapp.SchedulingTree;
import edu.penn.rtg.schedulingapp.output.OutputI;


/**
 * ComponentUI represents the Tree View of Scheduling Tree. This class handles
 * all GUI related functionality of the Tree View viz. adding new/removing
 * components/tasks, applying various algorithms.
 */
public class ComponentTreeUI extends JPanel implements CartsI {
	protected CartsTree tree;




	private jpe main;
	private SchedulingTree scTree;
	/**
	 * Constructor for the class. Builds the JTree object with the given tree
	 * 
	 * @param scTree
	 *            Tree which the GUI will render
	 * @param out
	 *            The output object to which the analysis result will be passed
	 */
	public ComponentTreeUI(SchedulingTree scTree, OutputI out,JFrame editor) {
		super(new GridLayout(1, 0));
		DefaultTreeModel treeModel = new DefaultTreeModel(scTree.getRoot());
		this.tree = new CartsTree(treeModel,scTree,out,this);
		this.scTree=scTree;
		JScrollPane scrollPane = new JScrollPane(tree);
		add(scrollPane);
		main=(jpe)editor;
	}



	/**
	 * Calls on Scheduling Tree to write the details to the given file
	 * 
	 * @param fileName
	 */
	public void convertToXML()
	{
		main.convertToXml();		
	}
	public void convertToXML(String fileName) {
		scTree.convertToXML(fileName);
	}


	///////////////////////////////////////////////////////////////////
	//
	// Menu Handler
	//
	////////////////////////////////////////////////////////////////////

	/**
	 * Handler for 'Add Component' clicked in the pop up menu
	 */
	public void addCompClicked() {
		tree.addCompClicked();
	}

	/**
	 * Handler for 'Edit Component' clicked in the pop up menu
	 */
	public void editCompClicked() {
		tree.editCompClicked();
	}


	/**
	 * Handler for 'Remove Component' clicked in the pop up menu
	 */
	public void removeCompClicked() {
		tree.removeCompClicked();
	}

	/**
	 * Handler for 'Add Task' clicked in the pop up menu
	 */
	public void addTaskClicked() {
		tree.addTaskClicked();
	}

	/**
	 * Handler for 'Edit Task' clicked in the pop up menu
	 */
	public void editTaskClicked() {
		tree.editTaskClicked();
	}

	/**
	 * Handler for 'Remove Task' clicked in the pop up menu
	 */
	public void removeTaskClicked() {
		tree.removeTaskClicked();
	}


	///////////////////////////////////////////////////////////////////
	//
	// Algorithm Handler
	//
	////////////////////////////////////////////////////////////////////


	/**
	 * Handlers when the user chooses to run Periodic Algorithms on the tree
	 */
	public void processPeriodic(){
		tree.processAlgo("PRM");
	}
	/**
	 * Handlers when the user chooses to run EDP Algorithms on the tree
	 */
	public void processEDP() {
		tree.processAlgo("EDP");
	}
	
	/**
	 * Handlers when the user chooses to run DPRM Algorithms on the tree
	 */
	
	
	public void processDPRM(){
		
		tree.processAlgo("DPRM");
	}
	/**
	 * Handlers when the user chooses to run MPR Algorithms on the tree
	 */
	public void processMPR(){
		tree.processAlgo("MPR");
	}
	/**
	 * Handlers when the user chooses to run EQV Algorithms on the tree
	 */
	public void processEQV(){
		tree.processAlgo("EQV");
	}






}
